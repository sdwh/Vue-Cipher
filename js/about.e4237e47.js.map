{"version":3,"sources":["webpack:///./src/assets/Locked.svg","webpack:///./src/views/Aes.vue","webpack:///./src/views/Aes.vue?6aed","webpack:///./src/views/Aes.vue?d614","webpack:///./node_modules/crypto-js/evpkdf.js","webpack:///./node_modules/crypto-js/cipher-core.js","webpack:///./node_modules/crypto-js/hmac.js","webpack:///./src/assets/Key.svg","webpack:///./node_modules/crypto-js/aes.js"],"names":["module","exports","class","alt","src","style","aesType","inputtext","inputType","type","secretkey","encrypt","decrypt","name","data","cipher","components","computed","this","methods","ciphertext","toString","bytes","error","render","__scopeId","root","factory","undef","CryptoJS","C","C_lib","lib","Base","WordArray","C_algo","algo","MD5","EvpKDF","extend","cfg","keySize","hasher","iterations","init","compute","password","salt","block","create","derivedKey","derivedKeyWords","words","length","update","finalize","reset","i","concat","sigBytes","Cipher","undefined","BufferedBlockAlgorithm","C_enc","enc","Base64","Utf8","createEncryptor","key","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","xformMode","_xformMode","_key","call","_doReset","process","dataUpdate","_append","_process","finalProcessedData","_doFinalize","ivSize","_createHelper","selectCipherStrategy","PasswordBasedCipher","SerializableCipher","message","C_mode","StreamCipher","finalProcessedBlocks","blockSize","mode","BlockCipherMode","iv","Encryptor","Decryptor","_cipher","_iv","CBC","xorBlock","offset","_prevBlock","processBlock","encryptBlock","slice","thisBlock","decryptBlock","C_pad","pad","Pkcs7","blockSizeBytes","nPaddingBytes","paddingWord","paddingWords","push","padding","unpad","CipherParams","BlockCipher","modeCreator","_minBufferSize","_mode","__creator","_doProcessBlock","_data","cipherParams","mixIn","formatter","stringify","C_format","format","OpenSSLFormatter","OpenSSL","wordArray","parse","openSSLStr","ciphertextWords","splice","encryptor","cipherCfg","algorithm","_parse","plaintext","C_kdf","kdf","OpenSSLKdf","execute","random","derivedParams","HMAC","_hasher","hasherBlockSize","hasherBlockSizeBytes","clamp","oKey","_oKey","clone","iKey","_iKey","oKeyWords","iKeyWords","messageUpdate","innerHash","hmac","SBOX","INV_SBOX","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","d","x","xi","sx","x2","x4","x8","t","RCON","AES","_nRounds","_keyPriorReset","keyWords","nRounds","ksRows","keySchedule","_keySchedule","ksRow","invKeySchedule","_invKeySchedule","invKsRow","M","_doCryptBlock","s0","s1","s2","s3","round","t0","t1","t2","t3"],"mappings":"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","file":"js/about.e4237e47.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/Locked.42a2d9fc.svg\";","<template>\n  <div class=\"aes\">\n    <img alt=\"Vue logo\" src=\"../assets/Locked.svg\"\n      style=\"width:200px\" v-if=\"aesType == 'encrypt'\">\n    <img alt=\"Vue logo\" src=\"../assets/Key.svg\" style=\"width:200px\" v-if=\"aesType == 'decrypt'\">\n  </div>\n  <div class=\"p-3 w-100 text-center mx-auto d-flex switchblock\">\n    <div class=\"btn btn-primary\" v-on:click=\"aesType = 'encrypt';inputtext='';\">Encrypt</div>\n    <div class=\"btn btn-warning\" v-on:click=\"aesType = 'decrypt';inputtext='';\">Decrypt</div>\n  </div>\n  <div class=\"input-block\">\n    {{ inputType }}\n    <input type=\"text\" class=\"input-text\" v-model.trim=\"inputtext\"/>\n    Secret key\n    <input type=\"password\" class=\"input-text\" v-model.trim=\"secretkey\"/>\n  </div>\n  <div class=\"block-style\">\n    <div class=\"algo\" v-if=\"aesType == 'encrypt'\">\n      <span class=\"title\">Cipher Text</span>\n      <span class=\"select-all\"> {{ encrypt()}} </span>\n    </div>\n    <div class=\"algo\" v-if=\"aesType == 'decrypt'\">\n      <span class=\"title\">Plain Text</span>\n      <span class=\"select-all\"> {{ decrypt()}} </span>\n    </div>\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\nimport AES from 'crypto-js/aes';\nimport UTF8 from 'crypto-js/enc-utf8';\n\nexport default {\n  name: 'AES',\n  data() {\n    return {\n      secretkey: '',\n      inputtext: '',\n      cipher: '',\n      aesType: 'encrypt',\n    };\n  },\n  components: {\n  },\n  computed: {\n    inputType() {\n      return this.aesType === 'encrypt' ? 'Plain Text' : 'Cipher Text';\n    },\n  },\n  methods: {\n    encrypt() {\n      const ciphertext = AES.encrypt(this.inputtext, this.secretkey).toString();\n      this.cipher = ciphertext;\n      return (this.inputtext === '' || this.secretkey === '') ? '' : ciphertext;\n    },\n    decrypt() {\n      try {\n        const bytes = AES.decrypt(this.inputtext, this.secretkey);\n        return bytes.toString(UTF8);\n      } catch (error) {\n        return '';\n      }\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n@mixin tablet{\n  @media(min-width: 1024px){\n    @content;\n  }\n}\n@mixin desktop{\n  @media(min-width: 1400px){\n    @content;\n  }\n}\n\n.btn{\n  font-size: 1.5rem;\n}\n\n.switchblock{\n  width: 100%;\n  justify-content: space-around;\n  @include tablet(){\n    width: 33% !important;\n    justify-content: space-between;\n  }\n  @include desktop{\n    width: 25% !important;\n    justify-content: space-between;\n  }\n}\n</style>\n","import { render } from \"./Aes.vue?vue&type=template&id=89fdfef4&scoped=true\"\nimport script from \"./Aes.vue?vue&type=script&lang=js\"\nexport * from \"./Aes.vue?vue&type=script&lang=js\"\n\nimport \"./Aes.vue?vue&type=style&index=0&id=89fdfef4&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-89fdfef4\"\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Aes.vue?vue&type=style&index=0&id=89fdfef4&scoped=true&lang=scss\"",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            var block;\n\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            var block;\n\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            var modeCreator;\n\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var finalProcessedBlocks;\n\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            var wordArray;\n\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            var salt;\n\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));","module.exports = __webpack_public_path__ + \"img/Key.a06f7d8a.svg\";",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            var t;\n\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));"],"sourceRoot":""}